// ==================== KeySnail configuration file ==================== //
####REPLACE_WITH_DOC####
// ==================== special keys ==================== //
####REPLACE_WITH_SPECIAL_KEYS####
// macro.setSleepTime(100); // key macro interval

// ==================== load modules ==================== //
// 初期化ファイルを複数のファイルに分割し, 読み込むことが出来る.
// userscript.addLoadPath("~/.keysnail.d");
// userscript.require("module1.js");
// userscript.require("module2.js");

// ==================== prefix ==================== //
// エディットモードで C-z を入力すると, ビューモードのキーバインドが使える
// key.keyMapHolder[key.modes.EDIT]["C-z"] = key.keyMapHolder[key.modes.VIEW];

// ==================== set about:config value ==================== //
// util.setPrefs(
//     {
//         "ui.key.generalAccessKey": 0, // kill access key (for Mac User)
//         "ui.caretWidth": 5,           // Make caret bolder
//         "ui.caretBlinkTime": 0,       // Stop caret blink
//         "accessibility.typeaheadfind": true, // Enable "Find As You Type"
//         "accessibility.typeaheadfind.linksonly": true // Only for links
//     }
// );

// ==================== set hooks ==================== //
hook.setHook("KeyBoardQuit",
            function (aEvent) {
                // 検索バーが開いていたら閉じる
                command.closeFindBar();
                if (util.isCaretEnabled()) {
                    // 編集エリア / キャレットブラウジングモードならマークをリセット
                    command.resetMark(aEvent);
                } else {
                    // ビューモードなら選択を解除
                    goDoCommand('cmd_selectNone');
                }
                // 汎用的なキャンセルイベントを生成
                key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_ESCAPE, true);
            });

// KeySnail を無効にしたいページの URL を正規表現で指定する
// key.blackList = [
//     "http://mail\.google\.com/.*"
// ];

// hook.setHook("LocationChange",
//              function (aNsURI) {
//                  var URL = aNsURI ? aNsURI.spec : null;
//                  key.suspendWhenMatched(URL, key.blackList);
//              });

// ==================== set global keys ==================== //

key.setGlobalKey("C-M-r",
                 function () { userscript.reload(); },
                 "設定ファイルを再読み込み");

// -------------------- help command -------------------- //

key.setGlobalKey([key.helpKey, "b"], function () {
                     key.listKeyBindings();
                 }, "キーバインド一覧を表示");

key.setGlobalKey([key.helpKey, "F"], function () {
                     openHelpLink('firefox-help');
                 }, "Firefox のヘルプを表示");

// -------------------- misc -------------------- //

key.setGlobalKey("C-t", function () {
                     document.getElementById("cmd_newNavigatorTab").doCommand();
                 }, "タブを開く");

key.setGlobalKey(["C-x", "j"], function (aEvent) {
                     hah.enterStartKey(aEvent);
                 }, "LoL を開始");

key.setGlobalKey("C-m", function (aEvent) {
                     key.generateKey(aEvent.originalTarget,
                                     KeyEvent.DOM_VK_RETURN, true);
                 },
                 "リターンコードを生成");

key.setGlobalKey("C-j",
                 function (aEvent, arg) {
                     command.bookMarkToolBarJumpTo(aEvent, arg);
                 },
                 "ブックマークツールバーのアイテムを開く", true);

// -------------------- useful focus -------------------- //

key.setGlobalKey(["C-x", "l"],
                 function () {
                     command.focusToById('urlbar');
                 },
                 "ロケーションバーへフォーカス", true);

key.setGlobalKey(["C-x", "g"],
                 function () {
                     command.focusToById('searchbar');
                 },
                 "検索バーへフォーカス", true);

key.setGlobalKey(["C-x", "t"],
                 function () {
                     command.focusElement(command.elementsRetrieverTextarea, 0);
                 },
                 "最初のインプットエリアへフォーカス", true);

key.setGlobalKey(["C-x", "s"],
                 function () {
                     command.focusElement(command.elementsRetrieverButton, 0);
                 },
                 "最初のボタンへフォーカス", true);

// -------------------- copy -------------------- //

key.setGlobalKey("M-w",
                 function (aEvent) {
                     command.copyRegion(aEvent);
                 },
                 "選択中のテキストをコピー");

// -------------------- search -------------------- //

key.setGlobalKey("C-s", function () {
                     command.iSearchForward();
                 },
                 "インクリメンタル検索");

key.setGlobalKey("C-r", function () {
                     command.iSearchBackward();
                 },
                 "逆方向インクリメンタル検索");

// -------------------- window --------------------
key.setGlobalKey(["C-x", "k"],
                 function () { BrowserCloseTabOrWindow(); },
                 "タブ / ウィンドウを閉じる");

key.setGlobalKey(["C-x", "K"],
                 function () { closeWindow(true); },
                 "ウィンドウを閉じる");

key.setGlobalKey(["C-x", "n"],
                 function () { OpenBrowserWindow(); },
                 "ウィンドウを開く");

key.setGlobalKey(["C-x", "C-c"],
                 function () { goQuitApplication(); },
                 "Firefox を終了");
key.setGlobalKey(["C-x", "o"],
                 function (aEvent, aArg) {
                     rc.focusOtherFrame(aArg);
                 },
                 "次のフレームを選択", true);

// -------------------- tab --------------------
key.setGlobalKey(["C-c", "C-t", "l"],
                 function () { gBrowser.mTabContainer.advanceSelectedTab(1, true); },
                 "ひとつ右のタブへ");
key.setGlobalKey(["C-c", "C-t", "h"],
                 function () { gBrowser.mTabContainer.advanceSelectedTab(-1, true); },
                 "ひとつ左のタブへ");
key.setGlobalKey(["C-c", "C-t", "u"],
                 function () { undoCloseTab(); },
                 "閉じたタブを元に戻す");

// -------------------- console --------------------
key.setGlobalKey(["C-c", "C-c", "C-v"],
                 function () { toJavaScriptConsole(); },
                 "Javascript コンソールを表示");
key.setGlobalKey(["C-c", "C-c", "C-c"],
                 function () {
                     command.clearConsole();
                 },
                 "Javascript コンソールの表示をクリア");

key.setGlobalKey(["C-c", "i"],
                 function () { BrowserPageInfo(); },
                 "ページ情報表示");

// -------------------- file --------------------
key.setGlobalKey(["C-x", "C-w"],
                 function () { saveDocument(window.content.document); },
                 "ファイルを保存");
key.setGlobalKey(["C-x", "C-f"],
                 function () { BrowserOpenFileWindow(); },
                 "ファイルを開く");

// -------------------- frame -------------------- //
key.setGlobalKey(["C-x", "1"],
                 function (aEvent) { window.loadURI(aEvent.target.ownerDocument.location.href); },
                 "現在のフレームだけを表示");

// ==================== set view mode keys ==================== //

// -------------------- scroll --------------------

key.setViewKey("C-n", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_DOWN, true);
               },
               "一行スクロールダウン");
key.setViewKey("C-p", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_UP, true);
               },
               "一行スクロールアップ");
key.setViewKey("C-f", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_RIGHT, true);
               },
               "右へスクロール");
key.setViewKey("C-b", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_LEFT, true);
               },
               "左へスクロール");

key.setViewKey("j", function () { goDoCommand('cmd_scrollLineDown'); },
               "一行スクロールダウン");
key.setViewKey("k", function () { goDoCommand('cmd_scrollLineUp'); },
               "一行スクロールアップ");

key.setViewKey([[">"],
                ["."]],
               function () { goDoCommand('cmd_scrollRight'); },
               "右へスクロール");
key.setViewKey([["<"],
                [","]], function () { goDoCommand('cmd_scrollLeft'); },
               "左へスクロール");

key.setViewKey([["b"],
                ["M-v"]],
               function () { goDoCommand('cmd_scrollPageUp'); },
               "一画面分スクロールアップ");
key.setViewKey("C-v",
               function () { goDoCommand('cmd_scrollPageDown'); },
               "一画面スクロールダウン");

key.setViewKey([["g"],
                ["M-<"]],
               function () { goDoCommand('cmd_scrollTop'); },
               "ページ先頭へ移動");
key.setViewKey([["G"],
                ["M->"]],
               function () { goDoCommand('cmd_scrollBottom'); },
               "ページ末尾へ移動");

// -------------------- navigation --------------------
key.setViewKey("R", function (aEvent) { BrowserReload(); },
               "更新");
key.setViewKey("B", function (aEvent) { BrowserBack(); },
               "戻る");
key.setViewKey("F", function (aEvent) { BrowserForward(); },
               "進む");

// -------------------- tab --------------------
key.setViewKey("l", function () { gBrowser.mTabContainer.advanceSelectedTab(1, true); },
               "ひとつ右のタブへ");
key.setViewKey("h", function () { gBrowser.mTabContainer.advanceSelectedTab(-1, true); },
               "ひとつ左のタブへ");

// -------------------- text --------------------
key.setViewKey(["C-x", "h"],
               function () { goDoCommand('cmd_selectAll'); },
               "すべて選択");

// -------------------- walk through --------------------

key.setViewKey("M-n", function () {
                   command.walkInputElement(command.elementsRetrieverButton, true, true);
               }, "次のボタンへフォーカスを当てる");

key.setViewKey("M-p", function () {
                   command.walkInputElement(command.elementsRetrieverButton, false, true);
               }, "前のボタンへフォーカスを当てる");

key.setViewKey("f", function () {
                   command.focusElement(command.elementsRetrieverTextarea, 0);
               },
               "最初のインプットエリアへフォーカス", true);

// ==================== set edit mode key ==================== //

key.setEditKey([["C-SPC"],
                ["C-@"]],
               function (aEvent) { command.setMark(aEvent); },
               "マークをセット");

key.setEditKey("C-o",
               function (aEvent) { command.openLine(aEvent); },
               "行を開く (open line)");

// -------------------- undo --------------------

key.setEditKey([["C-x", "u"],
                ["C-_"]],
               function () {
                   display.echoStatusBar("Undo!", 2000);
                   goDoCommand('cmd_undo');
               },
               "アンドゥ");
key.setEditKey(["C-\\"],
               function () {
                   display.echoStatusBar("Redo!", 2000);
                   goDoCommand('cmd_redo');
               },
               "リドゥ");

// -------------------- cursor navigation --------------------

// -------------------- intra-line --------------------

key.setEditKey("C-a",
               function (aEvent) { command.beginLine(aEvent); },
               "行頭へ移動");
key.setEditKey("C-e",
               function (aEvent) { command.endLine(aEvent); },
               "行末へ");

key.setEditKey("C-f",
               function (aEvent) { command.nextChar(aEvent); },
               "一文字右へ移動");
key.setEditKey("C-b",
               function (aEvent) { command.previousChar(aEvent); },
               "一文字左へ移動");

key.setEditKey("M-f",
               function (aEvent) { command.nextWord(aEvent); },
               "一単語右へ移動");
key.setEditKey("M-b",
               function (aEvent) { command.previousWord(aEvent); },
               "一単語左へ移動");

// -------------------- by line --------------------

key.setEditKey("C-n",
               function (aEvent) { command.nextLine(aEvent); },
               "一行下へ");
key.setEditKey("C-p",
               function (aEvent) { command.previousLine(aEvent); },
               "一行上へ");

// -------------------- by page --------------------

key.setEditKey("C-v",
               function (aEvent) { command.pageDown(aEvent); },
               "一画面分下へ");
key.setEditKey("M-v",
               function (aEvent) { command.pageUp(aEvent); },
               "一画面分上へ");

// -------------------- absolute --------------------

key.setEditKey("M-<",
               function (aEvent) { command.moveTop(aEvent); },
               "テキストエリア先頭へ");
key.setEditKey("M->",
               function (aEvent) { command.moveBottom(aEvent); },
               "テキストエリア末尾へ");

// -------------------- deletion --------------------

key.setEditKey("C-d",
               function () {
                   goDoCommand("cmd_deleteCharForward");
               },
               "次の一文字削除");
key.setEditKey("C-h",
               function () {
                   goDoCommand("cmd_deleteCharBackward");
               },
               "前の一文字を削除");
key.setEditKey("M-d",
               function () {
                   goDoCommand('cmd_deleteWordForward');
               },
               "次の一単語を削除");
key.setEditKey([["C-<backspace>"],
                ["M-<delete>"]],
               function () {
                   goDoCommand('cmd_deleteWordBackward');
               },
               "前の一単語を削除");

// -------------------- transformation -------------------- //

key.setEditKey("M-u", function (aEvent) {
                   command.processForwardWord(aEvent.originalTarget, function (aString) { return aString.toUpperCase(); });
               },
               "次の一単語を全て大文字に (Upper case)");

key.setEditKey("M-l", function (aEvent) {
                   command.processForwardWord(aEvent.originalTarget, function (aString) { return aString.toLowerCase(); });
               },
               "次の一単語を全て小文字に (Lower case)");

key.setEditKey("M-c", function (aEvent) {
                   command.processForwardWord(aEvent.originalTarget, command.capitalizeWord);
               },
               "次の一単語をキャピタライズ");

// -------------------- cut / paste --------------------

key.setEditKey("C-k",
               function (aEvent) {
                   command.killLine(aEvent);
               },
               "カーソルから先を一行カット");
key.setEditKey("C-y",
               function () { goDoCommand("cmd_paste"); },
               "ペースト");
key.setEditKey("C-w",
               function (aEvent) {
                   goDoCommand('cmd_copy');
                   goDoCommand("cmd_delete");
                   command.resetMark(aEvent);
               },
               "リージョンをカット");

// -------------------- rectangle -------------------- //

key.setEditKey(["C-x", "r", "d"],
               function (aEvent) {
                   command.replaceRectangle(aEvent.originalTarget, "");
               }, "矩形削除");

key.setEditKey(["C-x", "r", "t"],
               function (aEvent) {
                   var replacement = window.prompt("String rectangle", "");
                   command.replaceRectangle(aEvent.originalTarget, replacement);
               }, "矩形置換");

key.setEditKey(["C-x", "r", "o"],
               function (aEvent) {
                   command.openRectangle(aEvent.originalTarget);
               }, "矩形行空け");

// -------------------- selection -------------------- //

key.setEditKey(["C-x", "h"],
                 function (aEvent) {
                     command.selectAll(aEvent);
                 },
                 "全て選択");

// -------------------- walk through elements -------------------- //

key.setEditKey("M-n", function () {
                   command.walkInputElement(command.elementsRetrieverTextarea, true, true);
               }, "次のテキストエリアへフォーカス");

key.setEditKey("M-p", function () {
                   command.walkInputElement(command.elementsRetrieverTextarea, false, true);
               }, "前のテキストエリアへフォーカス");

// ==================== caret mode (press F7 to enter) ==================== //

// copy view mode keymap to caret mode keymap
key.copyKeyMap(key.modes.VIEW, key.modes.CARET);

key.setCaretKey([["C-SPC"],
                 ["C-@"]],
                function (aEvent) { command.setMark(aEvent); },
                "マークをセット");

// -------------------- caret move -------------------- //

key.setCaretKey([["C-a"],
                 ["^"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectBeginLine') : goDoCommand('cmd_beginLine'); },
                "行頭へ移動");
key.setCaretKey([["C-e"],
                 ["$"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectEndLine') : goDoCommand('cmd_endLine'); },
                "行末へ移動");

key.setCaretKey([["C-f"],
                 ["l"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectCharNext') : goDoCommand('cmd_scrollRight'); },
                "一文字右へ移動");
key.setCaretKey([["C-b"],
                 ["h"],
                 ["C-h"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectCharPrevious') : goDoCommand('cmd_scrollLeft'); },
                "一文字左へ移動");

key.setCaretKey([["M-f"],
                 ["w"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectWordNext') : goDoCommand('cmd_wordNext'); },
               "一単語右へ移動");
key.setCaretKey([["M-b"],
                 ["W"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectWordPrevious') : goDoCommand('cmd_wordPrevious'); },
                "一単語左へ移動");

key.setCaretKey([["C-n"],
                ["j"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectLineNext') : goDoCommand('cmd_scrollLineDown'); },
               "一行下へ");
key.setCaretKey([["C-p"],
                ["k"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectLinePrevious') : goDoCommand('cmd_scrollLineUp'); },
               "一行上へ");

key.setCaretKey([["C-v"],
                ["SPC"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectPageNext') : goDoCommand('cmd_movePageDown'); },
               "一画面分下へ");
key.setCaretKey([["M-v"],
                ["b"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectPagePrevious') : goDoCommand('cmd_movePageUp'); },
               "一画面分上へ");

key.setCaretKey([["g"],
                ["M-<"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectTop') : goDoCommand('cmd_scrollTop'); },
               "ページ先頭へ移動");
key.setCaretKey([["G"],
                ["M->"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectBottom') : goDoCommand('cmd_scrollBottom'); },
               "ページ末尾へ移動");

// -------------------- scroll -------------------- //

key.setCaretKey("J", function () {
                    util.getSelectionController().scrollLine(true);
                }, "画面を一行分下へスクロール");

key.setCaretKey("K", function () {
                    util.getSelectionController().scrollLine(false);
                }, "画面を一行分上へスクロール");

key.setCaretKey(",", function () {
                    util.getSelectionController().scrollHorizontal(true);
                }, "ページを左へスクロール");

key.setCaretKey(".", function () {
                    util.getSelectionController().scrollHorizontal(false);
                }, "ページを右へスクロール");

key.setCaretKey("z", function (aEvent) {
                    command.recenter(aEvent);
                }, "カーソル位置へスクロール");

// -------------------- tab navigation -------------------- //

key.setCaretKey("L", function () {
                    gBrowser.mTabContainer.advanceSelectedTab(1, true);
                }, "ひとつ右のタブへ");

key.setCaretKey("H", function () {
                    gBrowser.mTabContainer.advanceSelectedTab(-1, true);
                }, "ひとつ左のタブへ");

// ==================== Define your function (if needed) ==================== //
// 以下のようにしてモジュールを作成して関数を定義することが出来ます.
// ここでは RC という名前になっていますが, 他のモジュールと被らない範囲であれば
// 自由につけてしまって構いません.
// あらかじめ予約された名前空間は現在のところ
// Command, Display, Hook, HTML, Key, Util, Prompt, UserScript
// となっています.
// モジュールへのアクセスは「小文字にしたモジュール名」で行います.
// RC なら rc.hoge といった具合です.

KeySnail.RC = {
    init: function () {
    },

    // Very inspired from functions for keyconfig
    // http://www.pqrs.org/tekezo/firefox/extensions/functions_for_keyconfig/
    focusOtherFrame: function (aArg) {
        var focused = this.getFocusedWindow();
        var topFrameWindow = this.getTopFrameWindow();

        if (!focused) {
            focused = this.topFrameWindow();
        }

        // frame
        var currentframeindex = -1;
        var frameWindows = this.getListFrameWindow(topFrameWindow);
        for (var i = 0; i < frameWindows.length; ++i) {
            if (frameWindows[i] == focused) {
                currentframeindex = i;
                break;
            }
        }

        var focusTo = aArg ?
            currentframeindex - 1 : currentframeindex + 1;
        if (focusTo >= frameWindows.length) {
            focusTo = 0;
        } else if (focusTo < 0) {
            focusTo = frameWindows.length - 1;
        }

        // set focus
        var nextFrameWindow = frameWindows[focusTo];
        if (nextFrameWindow) {
            nextFrameWindow.focus();
            return;
        }
    },

    isFrameSetWindow: function (frameWindow) {
        if (!frameWindow) {
            return false;
        }

        var listElem = frameWindow.document.documentElement
            .getElementsByTagName('frameset');

        return (listElem && listElem.length > 0);
    },

    getListFrameWindow: function (baseWindow) {
        var listFrameWindow = [];

        if (this.isFrameSetWindow(baseWindow)) {
            var frameWindows = baseWindow.frames;

            for (var i = 0; i < frameWindows.length; ++i) {
                if (this.isFrameSetWindow(frameWindows[i])) {
                    var childWindows = this.getListFrameWindow(frameWindows[i]);
                    // 子フレームをくっつける
                    listFrameWindow = listFrameWindow.concat(childWindows);
                } else {
                    listFrameWindow.push(frameWindows[i]);
                }
            }
        }

        return listFrameWindow;
    },

    getTopFrameWindow: function () {
        return gBrowser.contentWindow;
    },

    getFocusedWindow: function () {
        var focused = document.commandDispatcher.focusedWindow;
        if (!focused) {
            focused = null;
        }

        return focused;
    }
};

// モジュールを登録
KeySnail.registerModule("RC");
// モジュールを初期化 (init メソッドが呼ばれる)
KeySnail.initModule("RC");
