// ==================== KeySnail configuration file ==================== //

// -------------------- キーシーケンスへの関数割り当て方法 -------------------- //
//
// 以下に示す関数群を使って, キーシーケンスを関数へと割り当てることができる.
//
// key.setGlobalKey(keys, func, ksDescription, ksNoRepeat);
// key.setEditKey(keys, func, ksDescription, ksNoRepeat);
// key.setViewKey(keys, func, ksDescription, ksNoRepeat);
// key.setCaretKey(keys, func, ksDescription, ksNoRepeat);
//
// 各引数の説明は次の通り.
//
// keys          => キー (文字列) か キーシーケンス (文字列の配列) を指定する.
//                  一つの関数を複数のキーシーケンスへ割り当てたい場合は「文字列の配列の配列」を指定する.
//                  キーの表記は Emacs のそれを踏襲
//                  ex1) Ctrl + Alt + t : C-M-t
//                  ex2) Arrow Key      : <up>, <down>, <left>, <right>
//                  ex3) PgUp, PgDn     : <prior>, <next>
//                  ex4) F1, F2, F3     : <f1>, <f2>, <f3>
//
// func          => 無名関数を指定する. この関数は二つの引数を取ることが出来る
//                     * 第一引数 => キーイベント
//                     * 第二引数 => 前置引数 (無ければ null)
//                  のようになっている.
//                  必要な場合は function (aEvent, aArg) のようにして
//                  これら二つの引数を関数中から使うことが出来る.
// ksDescription => 関数の説明. 省略可能.
//
// ksNoRepeat    => func 内で独自に前置引数を扱いたい場合など,
//                  勝手にコマンドが繰り返されるのを防ぐ為に使用する.
//                  この値が true でなければコマンドが前置引数の数だけ繰り返される
//                  省略可能.
//
// これらの関数は次に示す関数をラップしているだけ.
//
// key.defineKey(keyMapName, keys, func, ksDescription, ksNoRepeat);
//
// keyMapName    => key.modes.GLOBAL, key.modes.VIEW, key.modes.EDIT, key.modes.CARET
//
// ==================== フックの説明 ====================
// プログラムの各所には「フック」というものが設けられており, ユーザはここに任意の
// 関数を割り当てることが可能.
// 例えば key.quitKey が入力された時には KeyBoardQuit というフックに登録された
// 関数が呼ばれる.
// ユーザはここに「検索のキャンセル」, 「選択の解除」などの関数を登録することができる

// ==================== load modules (example) ==================== //
// 初期化ファイルを複数のファイルに分割し, 読み込むことが出来る.
// userscript.addLoadPath("~/.keysnail.d");
// userscript.require("module1.js");
// userscript.require("module2.js");

// ==================== special keys ==================== //
// key.quitKey : キーシーケンス入力のキャンセルに用いられる.
//               KeyBoardQuit フックを呼ぶので, 検索バーを閉じる等の動作をそこに登録しておくことも出来る.

// key.helpKey : インタラクティヴヘルプの表示, 汎用のヘルプキーとして働く.
//               例えば C-c C-c <helpKey> と入力すると, C-c C-c から始まるキーバインド一覧が表示される.
//               またこの初期化ファイルの設定では <helpKey> b とすればキーバインド一覧が表示されるようになっている.
####REPLACE_WITH_SPECIAL_KEYS####
// key macro interval
// macro.setSleepTime(100);

// ----------------------------------------
// コントロールキー / メタキーとして解釈させたいキーを変更したい場合は
// 次に示す二つの関数を変更する.

// key.isControlKey = function (aEvent) {
//     return aEvent.ctrlKey || aEvent.commandKey;
// }

// isMetaKey = function (aEvent) {
//     return aEvent.altKey;
// }

// ==================== original prefix ==================== //
// エディットモードで C-z を入力すると, ビューモードのキーバインドが使える
// key.keyMapHolder[key.modes.EDIT]["C-z"] = key.keyMapHolder[key.modes.VIEW];

// ==================== set about:config value ==================== //
// util.setPrefs(
//     {
//         "ui.key.generalAccessKey": 0, // kill access key (for Mac User)
//         "ui.caretWidth": 5,           // Make caret bolder
//         "ui.caretBlinkTime": 0,       // Stop caret blink
//         "accessibility.typeaheadfind": true, // Enable "Find As You Type"
//         "accessibility.typeaheadfind.linksonly": true // Only for links
//     }
// );

// ==================== set hooks ==================== //
hook.setHook("KeyBoardQuit",
            function (aEvent) {
                // 検索バーが開いていたら閉じる
                command.closeFindBar();
                if (util.isCaretEnabled()) {
                    // 編集エリア / キャレットブラウジングモードならマークをリセット
                    command.resetMark(aEvent);
                } else {
                    // ビューモードなら選択を解除
                    goDoCommand('cmd_selectNone');
                }
                // 汎用的なキャンセルイベントを生成
                key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_ESCAPE, true);
            });

// If user transit the page to "http://www.foo.com/bar/"
// from "http://www.hoge.com/huga/", aNsURI's property becomes ...
//
// aNsURI.spec      => "http://www.foo.com/bar/"
// aNsURI.scheme    => "http"
// aNsURI.host      => "www.foo.com"
// aNsURI.path      => "/bar/"
// aNsURI.prePath   => "http://www.hoge.com/huga/"

// hook.setHook("LocationChange",
//              function (aNsURI) {
//                  var URL = aNsURI ? aNsURI.spec : null;

//                  key.checkBlackList(URL);
//              });

// key.blackList = [
//     "http://mail\.google\.com/.*"
// ];

