// ==================== KeySnail configuration file ==================== //

// -------------------- How to bind function to the key sequence -------------------- //
//
// You can bind the function to the key sequence, using the functions listed below.
//
// key.setGlobalKey(keys, func, ksDescription, ksNoRepeat);
// key.setEditKey(keys, func, ksDescription, ksNoRepeat);
// key.setViewKey(keys, func, ksDescription, ksNoRepeat);
// key.setCaretKey(keys, func, ksDescription, ksNoRepeat);
//
// Here are the descriptions of the each argument.
//
// keys          => key (string) or key sequence (array)
//                  expression of the key follows the Emacs
//                  ex1) Ctrl + Alt + t : C-M-t
//                  ex2) Arrow Key      : <up>, <down>, <left>, <right>
//                  ex3) PgUp, PgDn     : <prior>, <next>
//                  ex4) F1, F2, F3     : <f1>, <f2>, <f3>
//
// func          => anonymous function.
//                  this function can take two arguments.
//                     * argument 1 => key event
//                     * argument 2 => prefix argument (or null)
//                  you can use these arguments through declaring the
//                  following expression.
//                        function (aEvent, aArg)
// ksDescription => Description of the function.
//                  you can omit this argument.
//
// ksNoRepeat    => when false, command (function) is executed
//                  prefix arguments times.
//                  if you want to use prefix argument in your
//                  function, and do not want to repeat it, set
//                  this value to true.
//                  you can omit this argument.
//
// Actually, these functions just wrap the function below.
//
// key.defineKey(keyMapName, keys, func, ksDescription, ksNoRepeat);
//
// keyMapName    => key.modes.GLOBAL, key.modes.VIEW, key.modes.EDIT, key.modes.CARET
//
// ==================== About hook ====================
// User can set the function to the hook.
// For example, when KeySnail the key press event of the key.quitKey,
// functions set to KeyBoardQuit are called.
// You can bind "Cancell isearch", "Deselect the text", and so forth.

// ==================== load modules (example) ==================== //
// userscript.addLoadPath("~/.keysnail.d");
// userscript.require("module1.js");
// userscript.require("module2.js");

// ==================== misc settings ==================== //
// key.quitKey : Cancel the current input.
//               This key event calls the KeyBoardQuit hook.
//               You can set the command like "close the find bar" to it.

// key.helpKey : Display the interactive help. General help key.
//               When you input C-c C-c <helpKey>, keybindings begin with C-c C-c are displayed.
//               And in this script settings, <helpKey> b lists the all keybindings.
// key.quitKey = "C-g";
// key.helpKey = "<f1>";

// ----------------------------------------
// // If you want to change the Ctrl key and Meta key, modify two functions below.

// key.isControlKey = function (aEvent) {
//     return aEvent.ctrlKey;
// };

// key.isMetaKey = function (aEvent) {
//     return aEvent.altKey || aEvent.commandKey;
// };

// ----------------------------------------
// key macro
// key.macroStartKey = "<f3>";
// key.macroEndKey   = "<f4>";
// macro.setSleepTime(100);

// ==================== remap ==================== //
// // you can use view-mode keybindings in edit-mode adding
// the prefix key C-z.
key.keyMapHolder[key.modes.EDIT]["C-z"] = key.keyMapHolder[key.modes.VIEW];

// ==================== access key ==================== //
// // If you are Mac user and want to use Ctrl key, uncomment.
// nsPreferences.setIntPref("ui.key.generalAccessKey", 0);

// ==================== set hooks ==================== //

hook.setHook("KeyBoardQuit",
            function (aEvent) {
                // Close the find bar if opened
                command.closeFindBar();
                if (util.isCaretEnabled()) {
                    // in edit area or caret browsing mode, reset the mark
                    command.resetMark(aEvent);
                } else {
                    // in view mode, deselect all
                    goDoCommand('cmd_selectNone');
                }
                // generate general cancell event
                key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_ESCAPE, true);
            });

// ==================== set global keys ==================== //

key.setGlobalKey("C-M-r",
                 function () { userscript.reload(); },
                 "Reload the initialization file");

// -------------------- help command -------------------- //

key.setGlobalKey([key.helpKey, "b"], function () {
                     key.listKeyBindings();
                 }, "List all keybindings");

key.setGlobalKey([key.helpKey, "F"], function (aEvent) {
                     openHelpLink('firefox-help');
                 }, "Display Firefox help");

// -------------------- misc -------------------- //

key.setGlobalKey("C-t", function () {
                     document.getElementById("cmd_newNavigatorTab").doCommand();
                 }, "Open the new tab");

key.setGlobalKey(["C-x", "j"], function (aEvent) {
                     hah.enterStartKey(aEvent);
                 }, "Start LoL");

key.setGlobalKey("C-m", function (aEvent) {
                     key.generateKey(aEvent.originalTarget,
                                     KeyEvent.DOM_VK_RETURN, true);
                 },
                 "Generate the return key code");

key.setGlobalKey("C-j",
                 function (aEvent, arg) {
                     command.bookMarkToolBarJumpTo(aEvent, arg);
                 },
                 "Open the bookmark toolbar item", true);

// -------------------- useful focus -------------------- //

key.setGlobalKey(["C-x", "l"],
                 function () {
                     command.focusToById('urlbar');
                 },
                 "Focus to the location bar", true);

key.setGlobalKey(["C-x", "g"],
                 function () {
                     command.focusToById('searchbar');
                 },
                 "Focus to the search bar", true);

key.setGlobalKey(["C-x", "t"],
                 function () {
                     command.focusElement(command.elementsRetrieverTextarea, 0);
                 },
                 "Focus to the first textarea", true);

key.setGlobalKey(["C-x", "s"],
                 function () {
                     command.focusElement(command.elementsRetrieverButton, 0);
                 },
                 "Focus to the first button", true);

// -------------------- copy -------------------- //

key.setGlobalKey("M-w",
                 function (aEvent) {
                     command.copyRegion(aEvent);
                 },
                 "Copy selected text");

// -------------------- search -------------------- //

key.setGlobalKey("C-s", function () {
                     command.iSearchForward();
                 },
                 "isearch forward");

key.setGlobalKey("C-r", function () {
                     command.iSearchBackward();
                 },
                 "isearch backward");

// -------------------- window --------------------
key.setGlobalKey(["C-x", "k"],
                 function () { BrowserCloseTabOrWindow(); },
                 "Close tab / window");

key.setGlobalKey(["C-x", "K"],
                 function () { closeWindow(true); },
                 "Close the window");

key.setGlobalKey(["C-x", "n"],
                 function () { OpenBrowserWindow(); },
                 "Open new window");

key.setGlobalKey(["C-x", "C-c"],
                 function () { goQuitApplication(); },
                 "Exit Firefox");
key.setGlobalKey(["C-x", "o"],
                 function (aEvent, aArg) {
                     rc.focusOtherFrame(aArg);
                 },
                 "Select next frame", true);

// -------------------- tab --------------------
key.setGlobalKey(["C-c", "C-t", "l"],
                 function () { gBrowser.mTabContainer.advanceSelectedTab(1, true); },
                 "Select next tab");
key.setGlobalKey(["C-c", "C-t", "h"],
                 function () { gBrowser.mTabContainer.advanceSelectedTab(-1, true); },
                 "Select previous tab");
key.setGlobalKey(["C-c", "C-t", "u"],
                 function () { undoCloseTab(); },
                 "Undo closed tab");

// -------------------- console --------------------
key.setGlobalKey(["C-c", "C-c", "C-v"],
                 function () { toJavaScriptConsole(); },
                 "Display JavaScript console");
key.setGlobalKey(["C-c", "C-c", "C-c"],
                 function () {
                     command.clearConsole();
                 },
                 "Clear Javascript console");

key.setGlobalKey(["C-c", "i"],
                 function () { BrowserPageInfo(); },
                 "Display page information");

// -------------------- file --------------------
key.setGlobalKey(["C-x", "C-w"],
                 function () { saveDocument(window.content.document); },
                 "Save current page to the file");
key.setGlobalKey(["C-x", "C-f"],
                 function () { BrowserOpenFileWindow(); },
                 "Open the local file");

// -------------------- frame -------------------- //
key.setGlobalKey(["C-x", "1"],
                 function (aEvent) { window.loadURI(aEvent.target.ownerDocument.location.href); },
                 "Show current frame only");

// ==================== set view mode keys ==================== //

// -------------------- scroll --------------------

key.setViewKey("C-n", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_DOWN, true);
               },
               "Scroll line down");
key.setViewKey("C-p", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_UP, true);
               },
               "Scroll line up");
key.setViewKey("C-f", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_RIGHT, true);
               },
               "Scroll right");
key.setViewKey("C-b", function (aEvent) {
                   key.generateKey(aEvent.originalTarget, KeyEvent.DOM_VK_LEFT, true);
               },
               "Scroll left");

key.setViewKey("j", function () { goDoCommand('cmd_scrollLineDown'); },
               "Scroll line down");
key.setViewKey("k", function () { goDoCommand('cmd_scrollLineUp'); },
               "Scroll line up");

key.setViewKey([[">"],
                ["."]],
               function () { goDoCommand('cmd_scrollRight'); },
               "Scroll right");
key.setViewKey([["<"],
                [","]], function () { goDoCommand('cmd_scrollLeft'); },
               "Scroll left");

key.setViewKey([["b"],
                ["M-v"]],
               function () { goDoCommand('cmd_scrollPageUp'); },
               "Scroll page up");
key.setViewKey("C-v",
               function () { goDoCommand('cmd_scrollPageDown'); },
               "Scroll page down");

key.setViewKey([["g"],
                ["M-<"],
                ["ESC", "<"]],
               function () { goDoCommand('cmd_scrollTop'); },
               "Scroll to the top of the page");
key.setViewKey([["G"],
                ["M->"],
                ["ESC", ">"]],
               function () { goDoCommand('cmd_scrollBottom'); },
               "Scroll to the bottom of the page");

// -------------------- navigation --------------------
key.setViewKey("R", function (aEvent) { BrowserReload(); },
               "Reload the page");
key.setViewKey("B", function (aEvent) { BrowserBack(); },
               "Back");
key.setViewKey("F", function (aEvent) { BrowserForward(); },
               "Forward");

// -------------------- tab --------------------
key.setViewKey("l", function () { gBrowser.mTabContainer.advanceSelectedTab(1, true); },
               "Select the next tab");
key.setViewKey("h", function () { gBrowser.mTabContainer.advanceSelectedTab(-1, true); },
               "Select the previous tab");

// -------------------- text --------------------
key.setViewKey(["C-x", "h"],
               function () { goDoCommand('cmd_selectAll'); },
               "Select all");

// -------------------- walk through --------------------

key.setViewKey("M-n", function () {
                   command.walkInputElement(command.elementsRetrieverButton, true, true);
               }, "Focus to the next button");

key.setViewKey("M-p", function () {
                   command.walkInputElement(command.elementsRetrieverButton, false, true);
               }, "Focus to the previous button");

// ==================== set edit mode key ==================== //

key.setEditKey([["C-SPC"],
                ["C-@"]],
               function (aEvent) { command.setMark(aEvent); },
               "Reset the mark");

key.setEditKey("C-o",
               function (aEvent) { command.openLine(aEvent); },
               "Open line");

// -------------------- undo --------------------

key.setEditKey([["C-x", "u"],
                ["C-_"]],
               function () { goDoCommand('cmd_undo'); },
               "Undo");

// -------------------- cursor navigation --------------------

// -------------------- intra-line --------------------

key.setEditKey("C-a",
               function (aEvent) { command.beginLine(aEvent); },
               "Beginning of the line");
key.setEditKey("C-e",
               function (aEvent) { command.endLine(aEvent); },
               "End of the line");

key.setEditKey("C-f",
               function (aEvent) { command.nextChar(aEvent); },
               "Forward char");
key.setEditKey("C-b",
               function (aEvent) { command.previousChar(aEvent); },
               "Previous char");

key.setEditKey("M-f",
               function (aEvent) { command.nextWord(aEvent); },
               "Next word");
key.setEditKey("M-b",
               function (aEvent) { command.previousWord(aEvent); },
               "previous word");

// -------------------- by line --------------------

key.setEditKey("C-n",
               function (aEvent) { command.nextLine(aEvent); },
               "Next line");
key.setEditKey("C-p",
               function (aEvent) { command.previousLine(aEvent); },
               "Previous line");

// -------------------- by page --------------------

key.setEditKey("C-v",
               function (aEvent) { command.pageDown(aEvent); },
               "Page down");
key.setEditKey("M-v",
               function (aEvent) { command.pageUp(aEvent); },
               "Page up");

// -------------------- absolute --------------------

key.setEditKey([["M-<"],
                ["ESC", "<"]],
               function (aEvent) { command.moveTop(aEvent); },
               "Beginning of the text area");
key.setEditKey([["M->"],
                ["ESC", ">"]],
               function (aEvent) { command.moveBottom(aEvent); },
               "End of the text area");

// -------------------- deletion --------------------

key.setEditKey("C-d",
               function () {
                   goDoCommand("cmd_deleteCharForward");
               },
               "Delete forward char");
key.setEditKey("C-h",
               function () {
                   goDoCommand("cmd_deleteCharBackward");
               },
               "Delete backward char");
key.setEditKey("M-d",
               function () {
                   goDoCommand('cmd_deleteWordForward');
               },
               "Delete forward word");
key.setEditKey([["C-<backspace>"],
                ["M-<delete>"]],
               function () {
                   goDoCommand('cmd_deleteWordBackward');
               },
               "Delete backward word");

// -------------------- cut / paste --------------------

key.setEditKey("C-k",
               function (aEvent) {
                   command.killLine(aEvent);
               },
               "Kill the rest of the line");
key.setEditKey("C-y",
               function () { goDoCommand("cmd_paste"); },
               "Paste");
key.setEditKey("C-w",
               function (aEvent) {
                   goDoCommand('cmd_copy');
                   goDoCommand("cmd_delete");
                   command.resetMark(aEvent);
               },
               "Cut current region");

// -------------------- selection -------------------- //

key.setEditKey(["C-x", "h"],
                 function (aEvent) {
                     command.selectAll(aEvent);
                 },
                 "Select whole text");

// -------------------- walk through elements -------------------- //

key.setEditKey("M-n", function () {
                   command.walkInputElement(command.elementsRetrieverTextarea, true, true);
               }, "Focus to the next text area");

key.setEditKey("M-p", function () {
                   command.walkInputElement(command.elementsRetrieverTextarea, false, true);
               }, "Focus to the previous text area");

// ==================== caret mode (press F7 to enter) ==================== //

// copy view mode keymap to caret mode keymap
key.copyKeyMap(key.modes.VIEW, key.modes.CARET);

key.setCaretKey([["C-SPC"],
                 ["C-@"]],
                function (aEvent) { command.setMark(aEvent); },
                "Set mark");

// -------------------- caret move -------------------- //

key.setCaretKey([["C-a"],
                 ["^"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectBeginLine') : goDoCommand('cmd_beginLine'); },
                "Move caret to the beginning of the line");
key.setCaretKey([["C-e"],
                 ["$"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectEndLine') : goDoCommand('cmd_endLine'); },
                "Move caret to the end of the line");

key.setCaretKey([["C-f"],
                 ["l"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectCharNext') : goDoCommand('cmd_scrollRight'); },
                "Move caret to the right");
key.setCaretKey([["C-b"],
                 ["h"],
                 ["C-h"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectCharPrevious') : goDoCommand('cmd_scrollLeft'); },
                "Move caret to the left");

key.setCaretKey([["M-f"],
                 ["w"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectWordNext') : goDoCommand('cmd_wordNext'); },
               "Move caret to the right by word");
key.setCaretKey([["M-b"],
                 ["W"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectWordPrevious') : goDoCommand('cmd_wordPrevious'); },
                "Move caret to the left by word");

key.setCaretKey([["C-n"],
                ["j"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectLineNext') : goDoCommand('cmd_scrollLineDown'); },
               "Move caret to the next line");
key.setCaretKey([["C-p"],
                ["k"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectLinePrevious') : goDoCommand('cmd_scrollLineUp'); },
               "Move caret to the previous line");

key.setCaretKey([["C-v"],
                ["SPC"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectPageNext') : goDoCommand('cmd_movePageDown'); },
               "Move caret down by page");
key.setCaretKey([["M-v"],
                ["b"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectPagePrevious') : goDoCommand('cmd_movePageUp'); },
               "Move caret up by page");

key.setCaretKey([["g"],
                ["M-<"],
                ["ESC", "<"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectTop') : goDoCommand('cmd_scrollTop'); },
               "Move caret to the top of the page");
key.setCaretKey([["G"],
                ["M->"],
                ["ESC", ">"]],
                function (aEvent) { aEvent.target.ksMarked ? goDoCommand('cmd_selectBottom') : goDoCommand('cmd_scrollBottom'); },
               "Move caret to the bottom of the page");

// -------------------- scroll -------------------- //

key.setCaretKey("J", function () {
                    util.getSelectionController().scrollLine(true);
                }, "Scroll line down");

key.setCaretKey("K", function () {
                    util.getSelectionController().scrollLine(false);
                }, "Scroll line up");

key.setCaretKey(",", function () {
                    util.getSelectionController().scrollHorizontal(true);
                }, "Scroll left");

key.setCaretKey(".", function () {
                    util.getSelectionController().scrollHorizontal(false);
                }, "Scroll right");

// -------------------- tab navigation -------------------- //

key.setCaretKey("L", function () {
                    gBrowser.mTabContainer.advanceSelectedTab(1, true);
                }, "Select next tab");

key.setCaretKey("H", function () {
                    gBrowser.mTabContainer.advanceSelectedTab(-1, true);
                }, "Select previous tab");

// ==================== Define your function (if needed) ==================== //
// You can create the module and define the funtions like below.
// Although in this example the module name is RC, you can choose it freely
// unless overlap the other modules.
// Modules already registered are currently,
//     Command, Display, Hook, HTML, Key, Util, Prompt, UserScript
// so you have to choose the other names.
// To access to the created module, use lower-cased module name.
// RC => rc.foo

KeySnail.RC = {
    init: function () {
    },

    // Very inspired from functions for keyconfig
    // http://www.pqrs.org/tekezo/firefox/extensions/functions_for_keyconfig/
    focusOtherFrame: function (aArg) {
        var focused = this.getFocusedWindow();
        var topFrameWindow = this.getTopFrameWindow();

        if (!focused) {
            focused = this.topFrameWindow();
        }

        // frame
        var currentframeindex = -1;
        var frameWindows = this.getListFrameWindow(topFrameWindow);
        for (var i = 0; i < frameWindows.length; ++i) {
            if (frameWindows[i] == focused) {
                currentframeindex = i;
                break;
            }
        }

        var focusTo = aArg ?
            currentframeindex - 1 : currentframeindex + 1;
        if (focusTo >= frameWindows.length) {
            focusTo = 0;
        } else if (focusTo < 0) {
            focusTo = frameWindows.length - 1;
        }

        // set focus
        var nextFrameWindow = frameWindows[focusTo];
        if (nextFrameWindow) {
            nextFrameWindow.focus();
            return;
        }
    },

    isFrameSetWindow: function (frameWindow) {
        if (!frameWindow) {
            return false;
        }

        var listElem = frameWindow.document.documentElement
            .getElementsByTagName('frameset');

        return (listElem && listElem.length > 0);
    },

    getListFrameWindow: function (baseWindow) {
        var listFrameWindow = [];

        if (this.isFrameSetWindow(baseWindow)) {
            var frameWindows = baseWindow.frames;

            for (var i = 0; i < frameWindows.length; ++i) {
                if (this.isFrameSetWindow(frameWindows[i])) {
                    var childWindows = this.getListFrameWindow(frameWindows[i]);
                    // Append the child frame
                    listFrameWindow = listFrameWindow.concat(childWindows);
                } else {
                    listFrameWindow.push(frameWindows[i]);
                }
            }
        }

        return listFrameWindow;
    },

    getTopFrameWindow: function () {
        return gBrowser.contentWindow;
    },

    getFocusedWindow: function () {
        var focused = document.commandDispatcher.focusedWindow;
        if (!focused) {
            focused = null;
        }

        return focused;
    }
};

// Register the module
KeySnail.registerModule("RC");
// Initialize the module (just call the init method)
KeySnail.initModule("RC");
